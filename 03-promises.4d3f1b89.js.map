{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SA8BA,SAASC,EAAcC,EAAUC,GAkBjC,OAjBgB,IAAIC,SAAQ,SAACC,EAASC,GACpC,IAAMC,EAAgBC,KAAKC,SAAW,GAEhCC,EAAY,CAChBR,WACAC,SAGFQ,YAAW,WACLJ,EAEqCF,EAA/BK,GAGRJ,EAAOI,E,GACLP,E,IA5CKS,SAASC,cAAc,SAE/BC,iBAAiB,UAAU,SAACC,GAC/BA,EAAMC,iBAMN,IAJyC,IAAnCC,EAAaL,SAASM,kBAAkB,SAAS,GACjDC,EAAYP,SAASM,kBAAkB,QAAQ,GAC/CE,EAAcR,SAASM,kBAAkB,UAAU,GAEhDG,EAAI,EAAGA,EAAIC,OAAOF,EAAYG,OAAQF,IAAK,CACnCpB,EAAcoB,EAAI,EAAGC,OAAOL,EAAWM,OAASD,OAAOH,EAAUI,OAASF,GAGlCG,MAAnD,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MACnBuB,QAAQC,IAAI,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,OAC1D0B,EAAA9B,GAAS+B,OAAOC,QAAQ,uBAAwCH,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAErE6B,OAAM,SAAAP,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MACpBuB,QAAQC,IAAI,sBAAuCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,OACzD0B,EAAA9B,GAAS+B,OAAOG,QAAQ,sBAAuCL,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', (event) => { //Вішаємо слухача на форму, який буде реагувати на submit.\n  event.preventDefault(); // Одразу перериваємо дефолтну поведінку сабміту.\n\n  const delayInput = document.getElementsByName('delay')[0]; // Витягуємо з розмітки інпути в змінні для роботи з їх значеннями в майбутньому.\n  const stepInput = document.getElementsByName('step')[0];\n  const amountInput = document.getElementsByName('amount')[0];\n  \n  for (let i = 0; i < Number(amountInput.value); i++) { // Через цикл будемо щоразу викликати функцію createPromise, а відповідно щоразу будемо створювати і отримувати проміс.\n  const promise =  createPromise(i + 1, Number(delayInput.value) + Number(stepInput.value) * i); // Виклик функції передаємо в змінну. Аргументами функції будуть введені значення отримані з інпутів.\n\n  promise // Далі обробка резултату виклику функції (тобто отриманого промісу)\n  .then(({ position, delay }) => { // Якщо все ок, тоді виводимо в консоль номер промісу та його затримку.\n  console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => { // Якщо не ок, тоді теж виводимо в консоль номер промісу та його затримку. \n  console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  })\n  \n    }\n})\n\n\n\n\nfunction createPromise(position, delay) { // Генератор промісів\nconst promise = new Promise((resolve, reject) => { // Створюємо проміс через клас і задаємо успішне виконання промісу, або ж ні.\n  const shouldResolve = Math.random() > 0.3; // Генератор випадкового числа з умовою.\n\n  const newObject = { // Створюємо допоміжний об`єкт, який будемо передавати як результат виконання. (можна передавати його властивості на пряму, але нехай буле так)\n    position,\n    delay\n  }\n\n  setTimeout(() => { // Робимо затримку СетТаймаут (Час затримки вкаже юзер в delay)\n    if (shouldResolve) {  // Далі умова, якщо згенероване число за визначеною > 0.3, тоді \n       // Fulfill         // успішне виконання проміму, а якщо менше тоді - ні.\n      resolve(newObject);\n    } else {   \n       // Reject\n      reject(newObject);\n    }}, delay)\n})\nreturn promise; // *Повертаємо отриманий проміс.\n}\n\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","newObject","setTimeout","document","querySelector","addEventListener","event","preventDefault","delayInput","getElementsByName","stepInput","amountInput","i","Number","value","then","param","console","log","concat","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.4d3f1b89.js.map"}